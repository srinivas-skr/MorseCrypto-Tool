# -*- coding: utf-8 -*-
"""Cryptograaphy-Techniques.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzXOO2lRpxBctEYmiVGwkBc25cnRNjHt
"""

!pip install cryptography

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
import base64

# Morse Code dictionary
MORSE_CODE_DICT = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
    'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
    'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
    '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ',': '--..--', '.': '.-.-.-',
    '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...',
    ';': '-.-.-', '=': '-...-', '+': '.-.-.', '"': '.-..-.', '@': '.--.-', ' ': '/'
}

# Reverse Morse Code dictionary
REVERSE_MORSE_CODE_DICT = {v: k for k, v in MORSE_CODE_DICT.items()}

# Function to convert text to Morse code
def text_to_morse(text):
    return ' '.join(MORSE_CODE_DICT.get(char.upper(), '') for char in text)

# Function to convert Morse code to text
def morse_to_text(morse_code):
    return ''.join(REVERSE_MORSE_CODE_DICT.get(code, '') for code in morse_code.split(' '))

# Function to encrypt a message
def encrypt_message(message, key, iv):
    # Convert message to bytes
    message_bytes = message.encode('utf-8')

    # Pad message to be multiple of block size
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_message = padder.update(message_bytes) + padder.finalize()

    # Encrypt message
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv))
    encryptor = cipher.encryptor()
    encrypted_message = encryptor.update(padded_message) + encryptor.finalize()

    # Encode encrypted message to base64 for display
    return base64.b64encode(encrypted_message).decode('utf-8')

# Function to decrypt a message
def decrypt_message(encrypted_message, key, iv):
    # Decode base64 encrypted message
    encrypted_message_bytes = base64.b64decode(encrypted_message)

    # Decrypt message
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv))
    decryptor = cipher.decryptor()
    padded_message = decryptor.update(encrypted_message_bytes) + decryptor.finalize()

    # Unpad message
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    message_bytes = unpadder.update(padded_message) + unpadder.finalize()

    # Convert bytes to string
    return message_bytes.decode('utf-8')

# Main function to handle user input
def main():
    key = b'16bytekey1234567'  # Ensure key length is 16 bytes (128 bits)
    iv = b'16byteiv12345678'   # Ensure iv length is 16 bytes

    print("Choose an option:")
    print("1. Morse Code Conversion")
    print("2. AES Encryption/Decryption")
    option = input("Enter 1 or 2: ")

    if option == '1':
        print("Choose operation:")
        print("1. Text to Morse Code")
        print("2. Morse Code to Text")
        operation = input("Enter 1 or 2: ")

        if operation == '1':
            text = input("Enter text to convert to Morse code: ")
            morse_code = text_to_morse(text)
            print("Morse Code:")
            print(morse_code)

        elif operation == '2':
            morse_code = input("Enter Morse code to convert to text: ")
            text = morse_to_text(morse_code)
            print("Text:")
            print(text)

        else:
            print("Invalid operation selected.")

    elif option == '2':
        print("Choose operation:")
        print("1. Encrypt")
        print("2. Decrypt")
        operation = input("Enter 1 or 2: ")

        if operation == '1':
            message = input("Enter message to encrypt: ")
            encrypted_message = encrypt_message(message, key, iv)
            print("Encrypted message (base64):")
            print(encrypted_message)

        elif operation == '2':
            encrypted_message_input = input("Enter encrypted message to decrypt: ")
            decrypted_message = decrypt_message(encrypted_message_input, key, iv)
            print("Decrypted message:")
            print(decrypted_message)

        else:
            print("Invalid operation selected.")

    else:
        print("Invalid option selected.")

# Run the main function
main()